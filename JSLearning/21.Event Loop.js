// Цикл подій

// Однопоточність - це властивість системи, яка дозволяє виконувати один потік виконання коду в один момент часу.
// Потік - це послідовність інструкцій, які виконуються в процесорі.

console.log('Start')
console.log('Start 2')
console.log('End')
// ці рядки коду це один потік виконання коду, виконується в один момент часу, тобто це один потік коду (однопоточний)

// Цикл подій (Event Loop) - це механізм, який дозволяє виконувати асинхронний код.

// Стек викликів (Call Stack) - це механізм, який відповідає за виконання функцій. Він працює за принципом LIFO (Last In First Out - останній прийшов першим вийшов). Це означає, що остання функція, яка була додана в стек викликів, буде першою, яка буде виконана.
// Кожен раз, коли функція викликається в коді, вона додається в стек викликів. Як тільки функція повертає результат, вона видаляється зі стеку викликів.
// Це дозволяє виконувати функції в правильному порядку, в порядку його викликів, що забезпечує послідовність виконання коду.

// Багатопоточність - це властивість системи, яка дозволяє виконувати багато потоків виконання коду в один момент часу. Багатопоточність може створити асинхронне виконання коду.
// Де можна побачити цю властивість? Наприклад, в браузері, коли відкривається багато вкладок, кожна вкладка працює в окремому потоці виконання коду. Простіше може бути - це таймер, запит до сервера, натискання кнопки на сайті, тощо.

// Без багатопоточності наш потік коду може заповнити стек викликів, що може призвести до помилки "Stack Overflow" (переповнення стеку), до помилки виконання програми.

// Асинхронний код (async) - це код, який виконується поза основним потоком виконання коду. Таким чином потік коду можна розбити на два потоки або більше.

// SetTimeout(callback, delay, arg1, arg2, ...) - це функція, яка виконується асинхронно, тобто вона виконується поза основним потоком виконання коду. Виконається вона через заданий час. Вона додається в Web API, а не в стек викликів. Після закінчення таймера, функція додається в чергу (Callback Queue). Після того, як стек викликів буде пустий, функція буде додана в стек викликів і виконається.

console.log('Start')

setTimeout(() => {
  console.log('Inside timeout, after 2 seconds')
}, 2000) // 2000 - це delay, тобто через скільки мілісекунд виконати функцію (2 секунди)

console.log('End')
// output: Start -> End -> Inside timeout, after 2 seconds

// Web API - це місце, де виконується асинхронний код. Він виконується поза стеком викликів.
// Callback Queue - це черга, в яку додаються функції, які виконуються асинхронно. Після того, як стек викликів буде пустий, функція буде додана в стек викликів і виконається.

// setImmediate(callback, arg1, arg2, ...) - ця функція дозволяє виконати функцію після того, як стек викликів буде пустий. Після того, як стек викликів буде пустий, функція буде додана в стек викликів і виконається.

console.log('Start')
setImmediate(() => {
  console.log('Inside setImmediate')
})
console.log('End')
// output: Start -> End -> Inside setImmediate

setImmediate(() => {
  console.log('Inside setImmediate2')
}, 0)
console.log('End2')
// output: End2 -> Inside setImmediate2 - тобто незалежно від того де ми викликаємо setImmediate, він буде виконуватися після того, як стек викликів буде пустий.

// setInterval(callback, delay, arg1, arg2, ...) - ця функція дозволяє виконати запускати виконання функції через певний проміжок часу.

console.log('Start')
const interval = setInterval(() => {
  console.log('Inside setInterval')
}, 1000)
console.log('End')
// output: Start -> End -> Inside setInterval -> Inside setInterval -> Inside setInterval -> ... - тобто функція буде виконуватися кожну секунду, аж до безконечності. Це є проблема. Як його зупинити?

// clearInterval(id) - ця функція дозволяє зупинити виконання функції, яка виконується через setInterval.
clearInterval(interval)

// clearTimeout(id) - ця функція дозволяє зупинити виконання функції, яка виконується через setTimeout.
// clearImmediate(id) - ця функція дозволяє зупинити виконання функції, яка виконується через setImmediate.
