// Елемент - це вбудований клас в JS, який представляє собою HTML-елемент дозволяє взаємодіяти з ними на веб-сторінці

// ;<div id='box' class='box'>
//   {' '}
// </div> // - це елемент
// можна помітити як він пишеться в JS:
// Перед таким тегом треба ставити ;, щоб JS не сприйняв це як помилку
// Весь текст в тегу пишеться у фігурних дужках і з одинарними лапками

// Документ - це вбудований об'єкт браузера, який представляє собою HTML-документ, який відкритий в браузері і дає доступ до всіх елементів на сторінці

document.getElementById('box') // тут ми звертаємось до елемента в документі по його id
// якщо в нас є два елемента з таким же id, то ми звернемось до першого з них

// якщо в нас два елемента з однаковим id, то ми можемо звернутись до них напряму через консоль браузера і в такому випадку в консолі ми побачимо обидва елемента (колекція з двома елементами)

// HTMLCollection - це вбудований об'єкт (клас) браузера, який представляє собою колекцію елементів, які ми можемо отримати з документа. Вона автоматично оновлюється, якщо ми додаємо або видаляємо елементи з документа
// Властивості HTMLCollection:
document.length // тут ми звертаємось до властивості length об'єкта document, яка показує кількість елементів в колекції
document.item(0) // тут ми звертаємось до елемента в документі по його індексу (перший елемент має індекс 0)
document.namedItem('box') // тут ми звертаємось до елемента в документі по його імені
document.getElementsByClassName('box') // тут ми звертаємось до елемента в документі по його класу
document.getElementsByTagName('div') // тут ми звертаємось до елемента в документі по його тегу
// можна ще написати document.getElementsByTagName('div')[0] і тоді ми звернемось до першого елемента з тегом div

main.getElementsByTagName('h1') // тут ми звертаємось до елемента в документі по його тегу, але в цьому випадку ми звертаємось до елементів, які знаходяться в елементі main	і так можна звертатись до елементів, які знаходяться в інших елементах
main.getElementsByTagName('h1').length // тут ми звертаємось до властивості length об'єкта main, яка показує кількість елементів в колекції по тегу h1, які знаходяться в елементі main

// все це стосується також і getElementsByClassName

document.querySelector('#box') // це вбудована функція, яка шукає елемент в документі по його селектору (в даному випадку по id)
document.querySelectorAll('.box') // це вбудована функція, яка шукає всі елементи в документі по їх селектору (в даному випадку по класу)

// У випадках з querySelector і querySelectorAll ми можемо використовувати всі селектори, які ми використовуємо в CSS і повертає нам вони колекцію елементів (NodeList)

// NodeList - це вбудований абстрактний клас браузера, який охоплює різні типи даних, такі як елементи, текстові вузли, коментарі і т.д. Він представляє собою колекцію вузлів, які ми можемо отримати з документа. Він не завжди оновлюється, якщо ми додаємо або видаляємо елементи з документа.
// В нього є свої властивості і методи (основні):

document.querySelector('#box').entries() // тут ми звертаємось до методу entries() об'єкта з id box, який показує всі властивості об'єкта з id box
document.querySelector('#box').keys() // тут ми звертаємось до методу keys() об'єкта з id box, який показує всі ключі об'єкта з id box
document.querySelector('#box').forEach((value, index, array) => {}) // тут ми звертаємось до методу forEach() об'єкта з id box, який показує всі значення, індекси і масиви об'єкта з id box
document.querySelector('#box').values() // тут ми звертаємось до методу values() об'єкта з id box, який показує всі значення об'єкта з id box
document.querySelector('#box').item() // тут ми звертаємось до методу item() об'єкта з id box, який показує елемент з id box за вказаним індексом

// -------------------------------------------------------------------------------------------
// ----- ЯКЩО хочемо шукати елементи то краще це робити через querySelector по класам --------
// -------------------------------------------------------------------------------------------

// -------------- Копіювання елементів з документа --------------
document.querySelector('#box').cloneNode(true) // тут ми звертаємось до методу cloneNode() об'єкта з id box, який показує копію елемента з id box, але якщо ми в методі cloneNode() вкажемо true, то ми скопіюємо всі вкладені елементи, а якщо false, то ми скопіюємо тільки елемент з id box

// -------------- Створення елементів в документі --------------
document.createElement('div') // тут ми звертаємось до методу createElement() об'єкта document, який створює елемент div

// -------------- Створення фрагментів в документі --------------
document.createDocumentFragment() // тут ми звертаємось до методу createDocumentFragment() об'єкта document, який створює фрагменти. Можна створити змінну і присвоїти їй значення методу createDocumentFragment() і потім використовувати цю змінну для створення фрагментів. Або декілька змінних з фрагментами і потім їх використовувати

// -------------- Порівняння елементів --------------
document.querySelector('.main').isSameNode(document.querySelector('.main')) // тут ми звертаємось до методу isSameNode() об'єкта з класом main, який порівнює елемент з класом main з елементом з класом main і повертає true, якщо вони однакові і false, якщо вони різні

main.isEqualNode(main) // тут ми звертаємось до методу isEqualNode() об'єкта з класом main, який порівнює елемент з класом main з елементом з класом main і повертає true, якщо вони однакові і false, якщо вони різні

// В чому різниця між isSameNode() і isEqualNode()?
// isSameNode() - це метод, який порівнює елементи по силці, тобто якщо ми створимо два однакових елементи і порівняємо їх, то він поверне false, бо вони не однакові по силці. Тобто він порівнює силку на елементи
// isEqualNode() - це метод, який порівнює елементи по вмісту, тобто якщо ми створимо два однакових елементи і порівняємо їх, то він поверне true, бо вони однакові по вмісту. Тобто він порівнює вміст елементів

// -------------- Список дочірніх елементів --------------
document.querySelector('.main').children // показує всі дочірні елементи елемента з класом main
document.querySelector('.main').firstElementChild // показує перший дочірній елемент елемента з класом main
document.querySelector('.main').lastElementChild // показує останній дочірній елемент елемента з класом main
document.querySelector('.main').childElementCount // показує кількість дочірніх елементів елемента з класом main
document.querySelector('.main').childNodes // показує всі дочірні елементи елемента з класом main
document.querySelector('.main').hasChildNodes() // перевіряє чи є дочірні елементи елемента з класом main і повертає true, якщо є і false, якщо немає
document.querySelector('.main').firstChild // показує перший дочірній елемент елемента з класом main
document.querySelector('.main').lastChild // показує останній дочірній елемент елемента з класом main
// Перевірка наявності дочірніх елементів
document.querySelector('.main').contains(document.querySelector('.main')) // перевіряє чи є елемент з класом main дочірнім елементом елемента з класом main і повертає true, якщо є і false, якщо немає

// -------------- Список батьківських елементів --------------
document.querySelector('.main').parentElement // показує батьківський елемент елемента з класом main
document.querySelector('.main').parentNode // показує батьківський елемент елемента з класом main
document.querySelector('.main').parentElement.parentElement // показує батьківський елемент батьківського елемента елемента з класом main

// -------------- Список сусідніх елементів --------------
document.querySelector('.main').nextElementSibling // показує наступний сусідній елемент елемента з класом main
document.querySelector('.main').previousElementSibling // показує попередній сусідній елемент елемента з класом main
document.querySelector('.main').nextSibling // показує наступний сусідній елемент елемента з класом main
document.querySelector('.main').previousSibling // показує попередній сусідній елемент елемента з класом main

// -------------- Додавання елементів в документ --------------
document.querySelector('.main').append(document.createElement('div')) // додаємо елемент div в елемент з класом main - це додавання в кінець
document.querySelector('.main').prepend(document.createElement('div')) // додаємо елемент div в елемент з класом main - це додавання в початок

document.querySelector('.main').appendChild(document.createElement('div')) // додаємо елемент div в елемент з класом main - по суті це те саме, що і append(). Але appendChild() працює тільки з елементами, а append() працює з будь-якими даними + append() може додавати декілька елементів одночасно

// може бути більш конкретно
document
  .querySelector('.main')
  .insertBefore(
    document.createElement('div'),
    document.querySelector('.main').firstElementChild,
  ) // додаємо елемент div перед першим дочірнім елементом елемента з класом main
document
  .querySelector('.main')
  .insertAdjacentElement('beforebegin', document.createElement('div')) // додаємо елемент div перед елементом з класом main
document
  .querySelector('.main')
  .insertAdjacentElement('afterbegin', document.createElement('div')) // додаємо елемент div в початок елемента з класом main
document
  .querySelector('.main')
  .insertAdjacentElement('beforeend', document.createElement('div')) // додаємо елемент div в кінець елемента з класом main
document
  .querySelector('.main')
  .insertAdjacentElement('afterend', document.createElement('div')) // додаємо елемент div після елемента з класом main

// -------------- Додавання тексту в документ --------------
document.querySelector('.main').insertAdjacentText('beforebegin', 'Hello') // додаємо текст перед елементом з класом main. Тут діють ті самі позиції, що і в insertAdjacentElement()

// -------------- Видалення елементів з документа --------------
document.querySelector('.main').remove() // видаляє елемент з класом main
document.querySelector('.main').removeChild(document.querySelector('.main')) // видаляє дочірній елемент елемента з класом main

// -------------- Заміна елементів в документі --------------
document.querySelector('.main').replaceWith(document.createElement('div')) // замінює елемент з класом main на елемент div
// в replaceWith() можна вказувати декілька елементів через кому і тоді вони замінять елемент з класом main
document
  .querySelector('.main')
  .replaceChild(document.createElement('div'), document.querySelector('.main')) // замінює дочірній елемент елемента з класом main на елемент div

document.querySelector('.main').replaceChildren(document.createElement('div')) // замінює всі дочірні елементи елемента з класом main на елемент div. replaceChildren() приймає декілька елементів через кому і тоді вони замінять всі дочірні елементи елемента з класом main. Він приймає тільки елементи, а не будь-які дані

document.querySelector('.main').after(document.createElement('div')) // додає елемент div після елемента з класом main. Приймає декілька елементів через кому і тоді вони додаються після елемента з класом main
document.querySelector('.main').before(document.createElement('div')) // додає елемент div перед елементом з класом main. Також приймає декілька елементів.

// -------------- Перевірка відповідності елемента CSS селектору --------------
document.querySelector('.main').matches('.main') // повертає true, якщо елемент з класом main відповідає CSS селектору .main і false, якщо не відповідає

// ==================================================================================
// =============================Властивості елементів================================
// ==================================================================================
const main = document.querySelector('.main')
// -------------- Тег елемента --------------
document.querySelector('.main').tagName // повертає тег елемента з класом MAIN
document.querySelector('.main').localName // повертає тег елемента з класом main

// -------------- id елемента --------------
main.id // повертає id елемента з класом main
main.id = 'main' // задає id елементу з класом main

// -------------- Класи елемента --------------
main.className // повертає всі класи елемента з класом main
main.className = 'main' // задає клас елементу з класом main
main.className += ' second' // додає клас елементу з класом main => main second

// -------------- HTML-код елемента --------------
main.innerHTML // повертає HTML-код елемента з класом main, тобто всі елементи що в ньому є
main.innerHTML = '<div>Text</div>' // задає HTML-код елементу з класом main

main.outerHTML // повертає HTML-код елемента з класом main з його власним тегом, тобто всі елементи що в ньому є + сам елемент з класом main
main.outerHTML = '<div>Text</div>' // задає HTML-код елементу з класом main з його власним тегом

// innerHTML і outerHTML можна використовувати для створення елементів. Якщо ми хочемо замінити контент в елементі то краще використовувати innerHTML, а якщо ми хочемо замінити сам елемент, то outerHTML

// -------------- Текст елемента --------------
main.textContent // повертає текст елемента з класом main
main.innerText // повертає текст елемента з класом main
main.outerText // повертає текст елемента з класом main з його власним тегом

// innerText - створює тег з текстом
// outerText - створює просто текст НЕ в елементі
// textContent - створює тільки текст, АЛЕ він може показати і той текст який був прихований на сторінці, чого не може зробити innerText

// -------------- Висота і ширина всього елемента --------------
main.offsetHeight // повертає висоту елемента з класом main з урахуванням padding, border і scroll
main.offsetWidth // повертає ширину елемента з класом main з урахуванням padding, border і scroll

// -------------- Висота і ширина елемента без padding, border і scroll --------------
main.clientHeight // повертає висоту без padding, border і scroll
main.clientWidth // повертає ширину

// -------------- Висота і ширина рамки елемента --------------
main.clientTop // повертає висоту рамки
main.clientLeft // повертає ширину рамки

// -------------- Висота і ширина прокрутки елемента --------------
main.scrollHeight // повертає висоту прокрутки
main.scrollWidth // повертає ширину прокрутки

// -------------- Висота і ширина прокрученої частини елемента --------------
main.scrollTop // повертає висоту прокрученої частини
main.scrollLeft // повертає ширину прокрученої частини

// -------------- Прокрутка вмісту елемента --------------
main.scroll(0, 100) // прокручує вміст елемента з класом main на 100px по осі Y, а по осі X - 0px
main.scrollTo(0, 100) // прокручує вміст елемента з класом main на 100px по осі Y, а по осі X - 0px

// або замість координат можна вказати елемент до якого потрібно прокрутити
main.scrollTo(0, document.querySelector('.main').scrollHeight) // прокручує вміст елемента з класом main до самого низу

main.scrollBy(0, 100) // прокручує вміст елемента з класом main на 100px по осі Y, а по осі X - 0px від поточного положення, це вниз
main.scrollBy(0, -100) // прокручує вміст елемента з класом main на -100px по осі Y, а по осі X - 0px від поточного положення, тобто вгору

// -------------- Стилі елементу --------------
main.style // повертає об'єкт в який можна записати стилі елемента з класом main
main.style.display = 'flex' // задали стиль зображення контенту елемента з класом main
main.style.cssText = 'display: flex; color: red' // задаємо декілька стилів одразу

window.getComputedStyle(main) // повертає об'єкт класу main який містить всі стилі елемента

main.getPropertyValue('display') // повертає значення стилю display елемента з класом main
main.setProperty('display', 'flex') // задає стиль display елементу з класом main
// setProperty добре використовувати для того щоб задати стиль який містить дефіс, наприклад flex-wrap, тому що в style це не працює
main.removeProperty('color') // видаляє стиль color елементу з класом main
// все це додає стиль в атрибут style елемента, тобто в HTML-код елемента!!!!
// видаляти стилі таким чином ми також не можемо, можемо тільки те що ми задали через style!!!!
// тобто файли зі стилями ми не можемо видалити таким чином

// -------------- Атрибути елемента --------------
main.attributes // повертає об'єкт з атрибутами елемента з класом main
main.getAttribute('class') // повертає значення атрибута class елемента з класом main
main.getAttributeNames() // повертає масив зі всіма атрибутами елемента з класом main
main.setAttribute('class', 'main') // задає атрибут class елементу з класом main
main.removeAttribute('class') // видаляє атрибут class елементу з класом main
main.hasAttribute('class') // перевіряє чи є атрибут class у елемента з класом main, повертає true або false
main.hasAttributes() // перевіряє чи є атрибути у елемента з класом main, повертає true якщо є хоча б один або false якщо немає жодного
main.toggleAttribute('class') // якщо атрибут class є у елемента з класом main, то він його видаляє, якщо немає, то він його додає. або можна вказати true або false
main.toggleAttribute('class', true) // додає атрибут class елементу з класом main, false - видаляє

// -------------- Список класів --------------
main.classList // повертає об'єкт зі списком класів елемента з класом main
// це дозволяє додавати, перевіряти, видаляти класи елемента
main.add('list') // додає клас list елементу з класом main, можна додати декілька класів через кому
main.remove('list') // видаляє клас list елементу з класом main, можна видалити декілька класів через кому
main.toggle('list') // якщо клас list є у елемента з класом main, то він його видаляє, якщо немає, то він його додає. або можна вказати true або false
main.contains('list') // перевіряє чи є клас list у елемента з класом main, повертає true або false
main.replace('list', 'main') // заміняє клас list на клас main у елемента з класом main

// також є базові методи для роботи з класами
main.forEach(callback) // перебирає всі класи елемента з класом main і виконує callback
main.length // показує кількість класів елемента з класом main (довжину)
main.keys() // повертає ключі класів елемента з класом main (індекси)
main.values() // повертає значення класів елемента з класом main (назви класів - рядки)

// ==================================================================================
// ============================ Документ та навігатор ===============================
// ==================================================================================

// Документ це вбудований об'єкт браузера, який представляє собою HTML-документ, який відкритий в браузері і дає доступ до всіх елементів на сторінці

// -------------- Доступ до елементів --------------
document.documentElement // повертає елемент html і все що в ньому є
document.head // повертає елемент head та всі його технічні елементи
document.body // повертає елемент body і весь контент сторінки
document.images // повертає колекцію з усіма картинками на сторінці
document.links // повертає колекцію з усіма посиланнями на сторінці
document.forms // повертає колекцію з усіма формами на сторінці
document.scripts // повертає колекцію з усіма скриптами на сторінці
document.styleSheets // повертає колекцію з усіма стилями на сторінці
document.title // повертає заголовок сторінки
document.cookie // повертає всі кукі на сторінці
// кукі - це невеликі файли, які зберігаються на комп'ютері користувача і містять дані про користувача і його налаштування для певного сайту. Вони відправляються разом з запитом на сервер і використовуються для зберігання інформації про користувача.
// Токен - це унікальний ідентифікатор, який використовується для ідентифікації користувача. Він зберігається в кукі і використовується для ідентифікації користувача на сервері. Токен може бути використаний для авторизації користувача на сервері.
document.domain // повертає домен сторінки (назву сайту)
document.URL // повертає URL сторінки
document.referrer // повертає URL сторінки з якої ми прийшли на поточну сторінку
document.readyState // повертає стан сторінки (loading, interactive, complete)
// loading - сторінка завантажується
// interactive - сторінка завантажилась, але ще не відобразилась
// complete - сторінка повністю завантажилась і відобразилась
document.activeElement // повертає активний елемент на сторінці. Активний елемент - це той елемент на сторінці, який має фокус (наприклад, якщо ми натиснемо на поле вводу, то воно стане активним елементом)
document.hasFocus() // перевіряє чи є фокус на сторінці і повертає true, якщо є і false, якщо немає

// Як перевірити чи користувач зараз користується сторінкою?
setTimeout(() => {
  if (document.hasFocus()) {
    console.log('Користувач зараз користується сторінкою')
  } else {
    console.log('Користувач не користується сторінкою')
  }
}, 3000)
// Якщо користувач зараз користується сторінкою, то через 3 секунди в консоль виведеться повідомлення "Користувач зараз користується сторінкою", а якщо ні, то виведеться повідомлення "Користувач не користується сторінкою". Чому через 3 секунди? тому що швидше оновитися сторінка не може, тому що вона повинна завантажитись, а потім відобразитись, тому треба дати їй час на завантаження і відображення

// -------------- Навігатор --------------
// Навігатор це вбудований об'єкт браузера, який представляє собою інформацію про браузер і пристрій, на якому відкрита сторінка
navigator.language // повертає мову браузера користувача (en-US)
navigator.languages // повертає масив з мовами браузера користувача ([en-US, en, ru, uk])
navigator.maxTouchPoints // повертає кількість дотиків, які може розпізнати пристрій (0). тобто чи є у пристрої сенсорний екран і якщо є, то повертає скільки дотиків він може розпізнати
navigator.onLine // перевіряє чи є підключення до інтернету і повертає true, якщо є і false, якщо немає
navigator.userAgent // повертає інформацію про браузер і пристрій, на якому відкрита сторінка
// Наприклад: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36
// Mozilla/5.0 - це ідентифікатор браузера (назва браузера і версія)
// Windows NT 10.0 - це ідентифікатор операційної системи
// AppleWebKit/537.36 - це ідентифікатор движка браузера

navigator.platform // повертає інформацію про операційну систему пристрою
// Наприклад: Win32
navigator.getBattery() // повертає об'єкт з інформацією про батарею пристрою. повертає Проміс тому треба писати через then()
navigator.getBattery().then((battery) => {
  console.log(battery)
})
// BatteryManager {charging: true, chargingTime: Infinity, dischargingTime: 0, level: 1, onchargingchange: null, …} - це об'єкт з інформацією про батарею пристрою
// charging: true - чи заряджається батарея
// chargingTime: Infinity - скільки часу потрібно щоб зарядити батарею
// dischargingTime: 0 - скільки часу можна користуватись батареєю
// level: 1 - скільки залишилось заряду батареї (від 0 до 1 => 0% - 100%)

navigator.geolocation // повертає об'єкт з інформацією про геолокацію пристрою
navigator.geolocation.getCurrentPosition((position) => {
  console.log(position)
})
// getCurrentPosition(success, error, options) - це метод, який повертає поточну позицію пристрою. Він приймає callback функцію, яка приймає об'єкт з інформацією про геолокацію пристрою
// success - це callback функція, яка викликається якщо ми отримали інформацію про геолокацію пристрою
// error - це callback функція, яка викликається якщо ми НЕ отримали інформацію про геолокацію пристрою
// options - це об'єкт з налаштуваннями

// Вивід: GeolocationPosition {coords: GeolocationCoordinates, timestamp: 1634165370000} - це об'єкт з інформацією про геолокацію пристрою

// coords: GeolocationCoordinates - це об'єкт з координатами пристрою:
// latitude: 50.4501 - широта
// longitude: 30.5234 - довгота
// accuracy: 20 - точність в метрах
// altitude: null - висота над рівнем моря
// altitudeAccuracy: null - точність висоти
// heading: null - напрямок руху
// speed: null - швидкість руху

// timestamp: 1634165370000 - час в мілісекундах, коли була отримана інформація про геолокацію пристрою
navigator.geolocation.watchPosition((position) => {
  console.log(position)
}) // watchPosition(success, error, options) - це метод, який повертає поточну позицію пристрою і відслідковує її зміни. Він приймає callback функцію, яка приймає об'єкт з інформацією про геолокацію пристрою

navigator.geolocation.clearWatch() // видаляє відслідковування позиції пристрою

// ==================================================================================
// =================== Просунуті властивості HTML елементів =========================
// ==================================================================================

// -------------- Елемент форми --------------
const form = document.querySelector('.form')
elements // повертає колекцію з усіма елементами форми

form.elements // повертає колекцію з усіма елементами форми
document.getElementById('form').submit() // відправляє форму, тобто дія яка відбувається коли ми натискаємо на кнопку "Відправити"
// такою командою ми можемо примусово відправити дані з форми, або вказавши їх тут
document.getElementById('form').reset() // очищає форму, або дія яка відбувається коли ми натискаємо на кнопку "Очистити"
form.reportValidity() // перевіряє чи всі поля заповнені правильно і повертає true, якщо так і false, якщо ні

// Приклад:
// document.querySelector('.form__button').onclick = () => {
//   if (form.reportValidity()) {
//     form.submit()
//   } else {
//     form.reset()
//   }
// }
// ----------

// -------------- Елементи поля вводу --------------
HTMLInputElement // це конструктор для створення елемента поля вводу
labels // повертає колекцію з усіма label елементами поля вводу
checkValidity() // перевіряє чи правильно заповнене поле вводу і повертає true, якщо так і false, якщо ні
reportValidity() // перевіряє чи правильно заповнене поле вводу і виводить повідомлення про помилку, якщо поле вводу заповнене неправильно
setCustomValidity() // задає повідомлення про помилку для поля вводу

// -----
// const email = document.getElementById('email')
// if (email.checkValidity()) {
//   if (email.value === '') {
//     email.setCustomValidity('Введіть email')
//     email.reportValidity()
//   } else {
//     email.setCustomValidity('Все добре')
//     email.reportValidity()
//   }
// } else {
//   email.setCustomValidity('Введіть правильний email')
//   email.reportValidity()
// }
// -----

stepUp(12) // збільшує значення поля вводу на 12.
stepDown(12) // зменшує значення поля вводу на 12.
// наприклад можна створити кнопку яка буде додавати в поле вводу 12 або навпаки віднімати 12

click() // функція яка викликає подію click на елементі
focus() // функція яка викликає подію focus на елементі, тобто при наведенні на елемент він стає активним

const username = document.getElementById('username')
setTimeout(() => {
  if (username.value === '') {
    username.focus()
  }
}, 5000)
// якщо поле вводу username пусте, то воно стає активним через 5 секунд і ми одразу можемо вводити дані

blur() // видаляє фокус з елемента, тобто він стає неактивним
select() // виділяє весь текст в полі вводу
// наприклад можна біля поля вводу можна створити кнопку яка б виділяла весь текст в полі вводу і копіювала його в буфер обміну через navigator.clipboard
readText() // отримуємо текст з буферу обміну
writeText() // записуємо текст в буфер обміну. Якщо абонент не має дозволу на доступ до буфера обміну, то цей метод не працюватиме

// ------
navigator.clipboard.writeText('Hello').then(() => {
  // замість Hello можна вставити username.value, наприклад
  alert('Скопійовано')
})
navigator.clipboard.readText().then((text) => {
  alert(text)
})
// ------

// -------------- Елементи зображення --------------
HTMLImageElement // це конструктор для створення елемента зображення
const image = document.getElementById('image')

image.complete // повертає true, якщо зображення повністю завантажене і false, якщо ні
image.naturalWidth // повертає ширину зображення (оригінальну ширину)
image.naturalHeight // повертає висоту зображення (оригінальну висоту)
// ------------- Елементи списку опцій -------------
HTMLOptionElement // це конструктор для створення елемента списку опцій
const option = document.getElementById('role')

option.options // повертає колекцію з усіма елементами списку опцій
option.index // повертає індекс елемента списку опцій
option.selected // повертає true, якщо елемент списку опцій вибраний і false, якщо ні
option.disabled // повертає true, якщо елемент списку опцій відключений і false, якщо ні
option.value // повертає значення елемента списку опцій
option.text // повертає текст елемента списку опцій
option.label // повертає текст лейблу списку опцій
option.defaultSelected // повертає true, якщо елемент списку опцій був вибраний по замовчуванню і false, якщо ні
option.form // повертає форму до якої належить елемент списку опцій
option.type // повертає тип елемента списку опцій
option.selectedOptions // повертає колекцію з усіма вибраними елементами списку опцій
option.length // повертає кількість елементів списку опцій
option.add() // додає елемент списку опцій
option.remove() // видаляє елемент списку опцій
option.item() // повертає елемент списку опцій за індексом

// але воно не просто додається, треба спочатку створити елемент списку опцій а потім додати його, або клонувати існуючий елемент списку опцій і потім замінити його на новий
const newOption = option.options[0].cloneNode(true) // клонуємо перший елемент списку опцій
newOption.value = 'marketing' // задаємо йому значення
newOption.innerText = 'Маркетинг' // задаємо йому текст
option.add(newOption) // додаємо його в список опцій
