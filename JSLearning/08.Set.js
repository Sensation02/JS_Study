// #region  Множина (Set)
// =============================================================================================
// це колекція унікальних значень. Вона надає упорядкований перебір елементів, з доступом по значенню та вбудованими функціями для роботи з ними. Також є можливість додавати, заміняти, видаляти та перевіряти наявність елементів.
// Коли ж використовувати масив а коли множину?
// Масив:
// - якщо нам потрібно зберігати значення в порядку їх додавання
// - якщо нам потрібно зберігати значення з індексами
// - якщо нам потрібно зберігати значення з повтореннями
// - якщо треба часто виконувати операції заміни, фільтрацію, сортування тощо

// Множина:
// - якщо нам потрібно зберігати унікальні значення
// - якщо порядок не важливий
// - якщо не має потреби звертатися до індексів
// - коли потрібно швидко перевіряти наявність елементів
// - коли є потреба виключати повторення (наприклад, видаляти дублікати)
// =============================================================================================
// Створення множини:
const set1 = new Set() // створюємо множину, а створюється вона завжди за допомоги оператора "new"
// можна створити пустим, а можна зразу з елементами
const userIdList = new Set([1352, 2628, 3653, 4235, 7595]) // створюємо множину з елементами (масивом)
console.log(userIdList) // Set(5) {1352, 2628, 3653, 4235, 7595}
// -------------------------------------------------------------------------------------------
// ітерування по множині:
for (let id of userIdList) {
  console.log(id) // 1352 2628 3653 4235 7595
}
// або можна використовувати метод forEach (value, key, set)
userIdList.forEach((id) => console.log(id)) // 1352 2628 3653 4235 7595
// -------------------------------------------------------------------------------------------
// Розмір множини:
console.log(userIdList.size) // 5
// -------------------------------------------------------------------------------------------
// Перевірка наявності елемента в множині:
console.log(userIdList.has(1352)) // true
console.log(userIdList.has(1353)) // false
// -------------------------------------------------------------------------------------------
// Додавання елемента в множину:
userIdList.add(1353)
console.log(userIdList) // Set(6) {1352, 2628, 3653, 4235, 7595, 1353}
// -------------------------------------------------------------------------------------------
// Видалення елемента з множини:
userIdList.delete(1353)
console.log(userIdList) // Set(5) {1352, 2628, 3653, 4235, 7595} - елемент видалився
// -------------------------------------------------------------------------------------------
// Видалення всіх елементів з множини:
userIdList.clear()
console.log(userIdList) // Set(0) {} - множина стала пустою
// -------------------------------------------------------------------------------------------
// Перетворення множини в масив:
const userIdList2 = new Set([1352, 2628, 3653, 4235, 7595])
const userIdList2Array = [...userIdList2]
console.log(userIdList2Array) // (5) [1352, 2628, 3653, 4235, 7595] - масив
// -------------------------------------------------------------------------------------------
// Ключі в множині: (повертає ітератор)
userIdList2.keys() // SetIterator {1352, 2628, 3653, 4235, 7595}
// -------------------------------------------------------------------------------------------
// Значення в множині: (також повертає ітератор)
userIdList2.values() // SetIterator {1352, 2628, 3653, 4235, 7595}
// далі з цього можна створити масив
const userIdList2Array2 = [...userIdList2.values()]
console.log(userIdList2Array2) // (5) [1352, 2628, 3653, 4235, 7595]
// -------------------------------------------------------------------------------------------
// Перетворення даних в множині:
userIdList2.entries() // SetIterator {1352 => 1352, 2628 => 2628, 3653 => 3653, 4235 => 4235, 7595 => 7595}
// і вже на основі цих даних можна створити об'єкт за допомоги функції Object.fromEntries()
Object.fromEntries(userIdList2.entries()) // {1352: 1352, 2628: 2628, 3653: 3653, 4235: 4235, 7595: 7595}
// де ми вже бачимо ключ і значення
// -------------------------------------------------------------------------------------------
// Перетворення масиву у множину з видалення дублікатів:
const dataArray = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
const dataUnique = new Set(dataArray)
console.log(dataUnique) // Set(5) {1, 2, 3, 4, 5} - дублікати видалені
// або інший варіант:
dataUnique = [...new Set(dataArray)]
// або ще інший варіант:
dataUnique = Array.from(new Set(dataArray))
// ще інший варіант, з використанням values():
dataUnique = Array.from(new Set(dataArray).values()) // хоча це те саме
// перетворення в множину за допомоги filter:
dataUnique = dataArray.filter(
  (item, index) => dataArray.indexOf(item) === index,
)
// -------------------------------------------------------------------------------------------
const categoryList = new Set()
function addCategory(category) {
  if (categoryList.has(category)) {
    ;`This category ${category} already exists`
    return false
  } else {
    categoryList.add(category)
    return true
  }
}
console.log(addCategory('sport')) // true
console.log(addCategory('sport')) // This category sport already exists
// -------------------------------------------------------------------------------------------
const students = [
  { id: 1, name: 'Bob', course: 'JavaScript' },
  { id: 2, name: 'John', course: 'Python' },
  { id: 3, name: 'Alex', course: 'Java' },
  { id: 4, name: 'Bob', course: 'TypeScript' },
  { id: 5, name: 'John', course: 'C#' },
  { id: 6, name: 'Alex', course: 'JavaScript' },
  { id: 7, name: 'Bob', course: 'Python' },
]
// а тепер створимо список унікальних курсів:
const courses = new Set(students.map((student) => student.course)) // Вибираємо унікальні дані
console.log(courses) // Set(5) {"JavaScript", "Python", "Java", "TypeScript", "C#"}
//#endregion
