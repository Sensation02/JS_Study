// #region Перемінні
let num = 1 // тип перемінної який доступний тільки в межах видимості.
const NAME = `Bazzil` // тип перемінної як і let який ніколи не зміниться, тому що константа, нові значення в таку перемінну не присвоїти. Константи пишуться великими літерами.
var num1 = 2 // тип перемінної який такий же як і let, але він не обмежений зоною видимості; Такий тип перемінної зараз не використовується.
var num1 = 3 // можна переприсвоїти перемінну, але не можна декларувати дві перемінні з однаковим іменем. Тобто використовувати var не рекомендується, так як це дуже проблемно.

// АЛЕ джаваскріпт це динамічно-типізована мова, тому let може бути і string i boolean, number тощо
// також в джаваскріпт є null (нуль/0) та undefined (не об'явлено) які відрізняються один від одного

const SURNAME = `Kaminskyi`
const FULLNAME = NAME + ` ` + SURNAME // конкатинація строк
console.log(FULLNAME) // Bazzil Kaminskyi

let age1 = 20,
  age2 = 30 // можна декларувати декілька перемінних одночасно
age1 = 28 // можна змінювати перемінні
//#endregion

// #region Типи перемінних
// 1. примітивні:
//  - string
//  - number - цілі або з плавучою точкою
//  - boolean - true or false (логічний)
//  - null
//  - undefined
//  - symbol - з його допомоги створюються унікальні типи
//  - bigint - цілі числа довільної довжини
//  - NaN - не число

// 2. ссилочний тип - object - такий об'єкт містить тільки посилання на об"єкт в пам'яті. Таких об'єктів може бути багато і вони можуть вказувати на один і ту ж ділянку пам'яті. При зміні даних в такому об'єкті, вони зміняться у всіх об'єктах.

const objectA = {
  a: 1,
  b: true,
}

const objectB = objectA

objectB.a = 2

console.log(objectA)
// output: 2 => тому що ми змінили дані на які посилаються два об'єкта, тобто в обох об'єктах вже цифра 2

// також до таких перемінних можна додавати нові властивості:
objectB.с = `string`

console.log(objectA.с)
// output: bazzil => тому що все що доступно другому об'єкту доступно і першому
//#endregion

// #region Статична та динамічна типізація

// string str = `string`
// int number = 123
// number = `string` => Error присвоєння даних з одного типу в інший

let a = 1
a = `string`
a = true
a = undefined

// ще один приклад: (розкоментуй щоб побачити)
// function a() {
//   console.log(`hey there`);
// }

// a();

// a = 10;

// a(); // Error => тому що "а" це функція, а не перемінна, тому в "а" може бути присвоєна тільки функція
// тому треба користуватися константами, тому ще попереджує помилки з динамічною типізацією

// ще приклад:
// const a = () => {
//   console.log(`hey there`);
// };
// a();
// a = 10; // Error => тому що в константу не можна присвоювати інші дані
// a();
// тому даний запис функції кращий у випадку коли мова динамічна

//#endregion
