// - це об'єкт, який містить властивості і методи, які дозволяють взаємодіяти з вікном браузера

// Властивості
// visualViewport - об'єкт, який містить інформацію про розміри вікна
// visualViewport.width - ширина вікна
// visualViewport.height - висота вікна
// visualViewport.offsetLeft - відстань від лівого краю вікна до лівого краю вмісту
// visualViewport.offsetTop - відстань від верхнього краю вікна до верхнього краю вмісту
// visualViewport.pageLeft - відстань від лівого краю вікна до лівого краю сторінки
// visualViewport.pageTop - відстань від верхнього краю вікна до верхнього краю сторінки
// visualViewport.scale - масштаб сторінки
// visualViewport.addEventListener() - додає обробник події
// visualViewport.removeEventListener() - видаляє обробник події
// visualViewport.dispatchEvent() - викликає подію
// -----------------------------
// screen - об'єкт, який містить інформацію про екран
// screen.width - ширина екрану
// screen.height - висота екрану
// screen.availWidth - ширина екрану без панелей і т.д.
// screen.availHeight - висота екрану без панелей і т.д.
// screen.colorDepth - кількість кольорів
// screen.pixelDepth - кількість пікселів
// screen.orientation - об'єкт, який містить інформацію про орієнтацію екрану
// screen.orientation.angle - кут повороту екрану
// screen.orientation.type - тип орієнтації екрану
// -----------------------------
// navigator - об'єкт, який містить інформацію про браузер
// navigator.userAgent - інформація про браузер
// navigator.platform - інформація про платформу
// navigator.appVersion - інформація про версію браузера
// navigator.vendor - інформація про виробника браузера
// navigator.language - інформація про мову браузера
// navigator.onLine - чи є з'єднання з мережею
// navigator.cookieEnabled - чи включені куки
// navigator.javaEnabled() - чи включена підтримка Java
// navigator.geolocation - об'єкт, який містить інформацію про геолокацію
// navigator.geolocation.getCurrentPosition() - отримати поточну позицію
// navigator.geolocation.watchPosition() - відстежувати зміну позиції
// navigator.geolocation.clearWatch() - зупинити відстеження зміни позиції
// navigator.mediaDevices - об'єкт, який містить інформацію про медіа
// navigator.mediaDevices.getUserMedia() - отримати доступ до медіа
// navigator.mediaDevices.enumerateDevices() - отримати доступ до пристроїв
// navigator.mediaDevices.getDisplayMedia() - отримати доступ до екрану
// navigator.mediaDevices.ondevicechange - обробник події
// navigator.clipboard - об'єкт, який містить інформацію про буфер обміну
// navigator.clipboard.readText() - прочитати текст з буфера обміну
// navigator.clipboard.writeText() - записати текст в буфер обміну
// navigator.clipboard.read() - прочитати дані з буфера обміну
// navigator.clipboard.write() - записати дані в буфер обміну
// -----------------------------
// location - об'єкт, який містить інформацію про поточну сторінку (URL-адресу) та дозволяє контролювати перенаправлення на інші сторінки
// location.href - повертає або встановлює URL поточної сторінки
// location.protocol - повертає або встановлює протокол поточної сторінки
// location.host - повертає або встановлює домен поточної сторінки
// location.hostname - повертає або встановлює доменне ім'я поточної сторінки
// location.port - повертає або встановлює порт поточної сторінки
// location.pathname - повертає або встановлює шлях поточної сторінки
// location.search - повертає або встановлює параметри поточної сторінки
// location.hash - повертає або встановлює якорь поточної сторінки
// location.origin - повертає початковий URL поточної сторінки
// location.assign() - змінює URL поточної сторінки. є більш коректним аналогом location.href, при чому зберігається історія переходів
// location.replace() - замінює URL поточної сторінки без збереження історії переходів
// location.reload() - перезавантажує поточну сторінку
// -----------------------------
// innerWidth - ширина вікна
// innerHeight - висота вікна
// outerWidth - ширина вікна з панелями і т.д.
// outerHeight - висота вікна з панелями і т.д.
// -----------------------------
// pageXOffset - кількість пікселів, на яку прокручено сторінку по осі Х
// pageYOffset - кількість пікселів, на яку прокручено сторінку по осі Y
// scrollX - кількість пікселів, на яку прокручено сторінку по осі Х
// scrollY - кількість пікселів, на яку прокручено сторінку по осі Y
// -----------------------------
// history - об'єкт, який містить інформацію про історію переходів
// history.length - кількість сторінок в історії
// history.state - стан поточної сторінки
// history.scrollRestoration - поведінка браузера при переході на сторінку з позицією прокрутки. по замовчуванню - auto, manual - встановлюється вручну
// history.back() - перехід на попередню сторінку в історії
// history.forward() - перехід на наступну сторінку в історії
// history.go() - перехід на сторінку в історії
// history.pushState(data, title, url) - додати сторінку в історію. data - дані, які будуть передані в обробник події popstate, title - заголовок, url - URL-адреса
// history.replaceState(data, title, url) - замінити сторінку в історії. data - дані, які будуть передані в обробник події popstate, title - заголовок, url - URL-адреса
// -----------------------------
// frames - об'єкт, який містить інформацію про фрейми
// frames.length - кількість фреймів
// frames[index] - фрейм за індексом
// frames[name] - фрейм за ім'ям
// -----------------------------
// orientation - орієнтація пристрою
// portrait-primary - портретна орієнтація
// portrait-secondary - портретна орієнтація, зворотна
// landscape-primary - ландшафтна орієнтація
// landscape-secondary - ландшафтна орієнтація, зворотна
// -----------------------------
// localStorage - об'єкт, який містить інформацію про локальне сховище браузера. Дані зберігаються назавжди і можуть бути доступні на різних вкладках і вікнах та після перезавантаження комп'ютера
// sessionStorage - об'єкт, який містить інформацію про локальне сховище браузера. Дані зберігаються до закриття вкладки або вікна
// localStorage.setItem(key, value) - додати дані в локальне сховище браузера. key - ключ, value - значення
// localStorage.getItem(key) - отримати дані з локального сховища браузера. key - ключ
// -----------------------------
// locationbar - об'єкт, який містить інформацію про адресний рядок
// menubar - об'єкт, який містить інформацію про панель меню
// personalbar - об'єкт, який містить інформацію про панель закладок
// scrollbars - об'єкт, який містить інформацію про прокрутку
// statusbar - об'єкт, який містить інформацію про панель статусу
// toolbar - об'єкт, який містить інформацію про панель інструментів
// -----------------------------
// top - посилання на головне вікно
// parent - посилання на батьківське вікно
// self - посилання на поточне вікно
// opener - посилання на вікно, яке відкрило поточне вікно
// name - ім'я поточного вікна
// closed - чи закрите вікно
// status - текст статусу вікна
// defaultStatus - текст статусу вікна за замовчуванням
// frameElement - посилання на фрейм, в якому відкрите поточне вікно

// =============================
// Взаємодія з вікном браузера
// alert(message) - вивести повідомлення з кнопкою OK. Добре використовувати як аналог console.log()
// confirm(message) - вивести повідомлення з кнопками OK і Cancel. В якості результату повертає true або false
let result = confirm('Are you sure?')
if (result) {
  alert('OK')
} else {
  alert('Cancel')
}
// prompt(message, default) - вивести повідомлення з полем вводу і кнопками OK і Cancel. В якості результату повертає введений текст або null
result = prompt('Enter your name', 'John')
if (result) {
  alert(`Hello, ${result}`)
} else {
  alert('Cancel')
}
// print() - вивести друковану версію сторінки. Таку функцію можна викликати з натисненням кнопки для того щоб вивести друковану версію сторінки і потім її надрукувати через принтер
// stop() - зупинити завантаження сторінки
// close() - закрити поточне вікно
// scrollBy(x, y) - прокрутити сторінку на вказану кількість пікселів по осі Х і Y з поточної позиції
// scrollTo(x, y) - прокрутити сторінку до певного місця на вказану кількість пікселів по осі Х і Y

// -----------------------------
// open(url, name, features, replace) - відкрити нове вікно. Де url - адреса сторінки, яку потрібно відкрити, name - ім'я вікна, features - параметри вікна, replace - чи замінити поточну сторінку
const windowFeatures = 'width=500,height=500'
const newWindow = open('https://google.com', 'Google', windowFeatures, true) // відкрити нове вікно

// які можуть бути параметри?
// width - ширина вікна
// height - висота вікна
// left - відступ вікна зліва
// top - відступ вікна зверху
// _self - відкрити в поточному вікні
// _blank - відкрити в новому вікні
// _parent - відкрити в батьківському вікні
// _top - відкрити в головному вікні
// toolbar - панель інструментів
// menubar - панель меню
// location - адресний рядок
// resizable - чи можна змінювати розмір вікна
// scrollbars - чи є прокрутка
// status - панель статусу
// -----------------------------
// moveBy(x, y) - перемістити вікно на вказану кількість пікселів по осі Х і Y з поточної позиції
// moveTo(x, y) - перемістити вікно до певного місця на вказану кількість пікселів по осі Х і Y
// resizeBy(x, y) - збільшити розмір вікна на вказану кількість пікселів по осі Х і Y відносно поточного розміру
// resizeTo(x, y) - змінити розмір вікна на вказану кількість пікселів по осі Х і Y
