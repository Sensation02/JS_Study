// Regular expressions (regex)
// це шаблон для пошуку і зіставлення тексту в рядку (пошук по шаблону). Це спеціальний рядок символів, який допомагає описувати різні правила пошуку.
// Регулярні вирази використовується для здійснення пошуку, заміни, валідації, розбиття тексту на частини, вилучення певних частин тексту і т.д.
// ==========================================================================================================
// Одиничний символ - '.' - будь-який символ, крім переведення рядка
// якщо буде "..." - то буде шукати три символи підряд тощо
// ----------------------------------------------------------------------------------------------------------
// /g - глобальний пошук, тобто пошук всіх співпадінь, а не першого
// результат пошуку - масив зі співпадіннями
// /m - пошук по кожному рядку окремо
// ----------------------------------------------------------------------------------------------------------
// якщо шукати, наприклад "a" - то буде шукати перше співпадіння
// якщо "a/g" - то буде шукати всі співпадіння
// "a/gm" - то буде шукати всі співпадіння в кожному рядку окремо
// "c.t" - буде шукати "c" і "t" з будь-яким символом між ними і чим більше "..." - тим більше символів між ними
// ----------------------------------------------------------------------------------------------------------
// "\" - екранування, тобто використовується для того, щоб використовувати спеціальні символи як звичайні (його ми використовували не раз у попередніх уроках)
// наприклад апостроф - "\'" або ж лапки - '\"' тощо
// якщо шукати "c\.t" - то буде шукати конкретно "c.t" як один символ
// ----------------------------------------------------------------------------------------------------------
// "^" - початок рядка
// "$" - кінець рядка

// при включених прапорцях "g" і "m" - "^" і "$" будуть шукати початок і кінець кожного рядка окремо
// якщо виключити прапорець "m" - то буде шукати початок і кінець всього тексту
// якщо виключити прапорець "g" - то буде шукати перше співпадіння

// наприклад "^a" - буде шукати всі рядки, які починаються з "a"
// або ж "a$" - буде шукати всі рядки, які закінчуються на "a"

// якщо "...$" - то буде шукати всі рядки, які закінчуються на "..." тобто будь які 3 символи в кінці рядка
// або ж "^..." - буде шукати всі рядки, які починаються на "..." тобто будь які 3 символи в початку рядка

// уявимо що хочемо знайти крапку в кінці рядка
// для цього потрібно використати "\.$" - тобто буде шукати крапку в кінці рядка
// ----------------------------------------------------------------------------------------------------------
// Збіг символів - "[]" - всередині вказуємо які символи шукати
// наприклад "[abc]" - буде шукати "a" або "b" або "c" у всіх рядках
// а якщо "[a-z]" - то буде шукати всі символи від "a" до "z" у всіх рядках
// можна писати великі і малі - "[a-zA-Z]" - буде шукати всі символи від "a" до "z" і від "A" до "Z" у всіх рядках
// числа також можна шукати - "[0-9]" - буде шукати всі числа від "0" до "9" у всіх рядках
// взагалі можна шукати будь-які символи - "[a-zA-Z0-9]" - буде шукати всі символи від "a" до "z" і від "A" до "Z" і від "0" до "9" у всіх рядках
// ----------------------------------------------------------------------------------------------------------
// Вираз "не" - "[^...]" - шукає все, що не входить в дужки
// наприклад "[^a-z]" - буде шукати все, що не входить в діапазон від "a" до "z" у всіх рядках

// ----------------------------------------------------------------------------------------------------------
// Групи - "()" - використовується для того, щоб згрупувати символи
// наприклад "(abc)" - буде шукати "abc" як один символ
// або ж "(a|b|c)" - буде шукати "a" або "b" або "c" як один символ
// ([a-z])([0-9]) - буде шукати два символи - перший буде від "a" до "z", а другий від "0" до "9"
// ([a-z])([0-9])\2\1 - буде шукати два символи - перший буде від "a" до "z", а другий від "0" до "9"
// \2\1 - буде шукати те, що знаходиться в другій дужці, а потім те, що знаходиться в першій дужці
// можна комбінувати з іншими виразами
// ^([a-z])([0-9])\2\1$ - спершу буде шукати те що починається з першої дужки, потім те що починається з другої дужки, потім те що починається з другої дужки і потім те що починається з першої дужки. І все це повинно бути в кінці рядка
// ----------------------------------------------------------------------------------------------------------
// Будь яка цифра - "\d"
// Будь яка буква - "\w"

// наприклад (\d)(\w) - буде шукати два символи - перший буде будь-яка цифра, а другий будь-яка буква
// або ([a-z]\d)\w) - буде шукати три символи - перший буде від "a" до "z", другий буде будь-яка цифра, а третій будь-яка буква
// ----------------------------------------------------------------------------------------------------------
// /D - будь який символ, крім цифри
// /W - будь який символ, крім букви

// наприклад (\D)(\W) - буде шукати два символи - перший буде будь-який символ, крім цифри, а другий будь-який символ, крім букви
// або ([a-z]\D)\W) - буде шукати три символи - перший буде від "a" до "z", другий буде будь-який символ, крім цифри, а третій будь-який символ, крім букви
// [^Aa\w][^bB\w][^cC\w] - буде шукати три символи - перший буде будь-який символ, крім букви "A" або "a" або будь-якої букви, другий буде будь-який символ, крім букви "b" або "B" або будь-якої букви, а третій буде будь-який символ, крім букви "c" або "C" або будь-якої букви
// ----------------------------------------------------------------------------------------------------------
// Пробіл - "\s" - буде шукати пробіл у всіх рядках, також буде шукати табуляцію та переніс рядка
// \S - буде шукати все, крім пробілу

// \s\s - буде шукати два пробіли
// \s\S$ - буде шукати пробіл, а потім буде шукати все, крім пробілу, і все це повинно бути в кінці рядка
// ^\S\s - буде шукати все, крім пробілу, а потім буде шукати пробіл, і все це повинно бути в початку рядка
// ----------------------------------------------------------------------------------------------------------
// \b - границі слова
// \B - буде шукати все, крім границь слова

// \b\w\w\w\b - буде шукати слово з трьох букв
// \bMoon\b - буде шукати слово "Moon"
// ....\b - буде шукати слово, яке закінчується на "...." (4 символи)
// \B\w\w\w\B - буде шукати слово з трьох букв, яке не має границь, тобто якщо слово буде більше 5 символів, то воно буде знайдено, якщо слово буде мати 4 і менше символів, то воно не буде знайдено
// ----------------------------------------------------------------------------------------------------------
// {n} - шукає певну кількість символів, де "n" - це кількість символів

// \w{3} - буде шукати три букви (це буде зручніше ніж писати \w\w\w)
// \w{3,5} - буде шукати від трьох до п'яти букв
// \b\w{3,5}\b - буде шукати слово з трьох до п'яти букв
// ----------------------------------------------------------------------------------------------------------
// X* - шукає нуль або більше повторень символу "X"

// \b\w* - буде шукати слово з нуль або більше букв
// .a* - буде шукати символ, а потім нуль або більше символів "a"

// ----------------------------------------------------------------------------------------------------------
// X+ - шукає один або більше повторень символу "X"
// X? - шукає нуль або одне повторення символу "X"
// X- - шукає від одного до багатьох повторень символу "X"
// ----------------------------------------------------------------------------------------------------------
// Або - "|"

// \b\w{3}\b|\b\w{5}\b - буде шукати слово з трьох букв або слово з п'яти букв
// ----------------------------------------------------------------------------------------------------------
// ?= - позитивний прогляд назад

// \w+(?=\.com) - буде шукати слово, яке закінчується на ".com"
// \w+(?=\.com|\.net) - буде шукати слово, яке закінчується на ".com" або ".net"
// ----------------------------------------------------------------------------------------------------------
// ?! - негативний прогляд назад

// \w+(?!\.com) - буде шукати слово, яке не закінчується на ".com"
// \w+(?!\.com|\.net) - буде шукати слово, яке не закінчується на ".com" або ".net"
// ----------------------------------------------------------------------------------------------------------
// ?<= - позитивний прогляд вперед

// (?<=\.)\w+ - буде шукати слово, яке починається з крапки
// (?<=\.com|\.net)\w+ - буде шукати слово, яке починається з ".com" або ".net"
// (?<=\www\.)\w+ - буде шукати слово, яке починається з "www."

// ----------------------------------------------------------------------------------------------------------
// ?<! - негативний прогляд вперед

// (?<!\.)\w+ - буде шукати слово, яке не починається з крапки
// (?<!\.com|\.net)\w+ - буде шукати слово, яке не починається з ".com" або ".net"

// \b((?<=\s)(\w{2,})|(\w{2,})(?!\s))\b - буде шукати слово, яке має більше двох букв і яке не має пробілів на початку або в кінці слова
// ----------------------------------------------------------------------------------------------------------
// ?<! - негативний прогляд вперед

// (?<!\.)\w+ - буде шукати слово, яке не починається з крапки
// (?<!\.com|\.net)\w+ - буде шукати слово, яке не починається з ".com" або ".net"
// ----------------------------------------------------------------------------------------------------------
// (?:) - група без захоплення

// \b(?:\w{2,})\b - буде шукати слово, яке має більше двох букв і яке не має пробілів на початку або в кінці слова
// ----------------------------------------------------------------------------------------------------------
// \n - переніс рядка

// \b\w{2,}\b\n - буде шукати слово, яке має більше двох букв і яке не має пробілів на початку або в кінці слова, а потім буде шукати переніс рядка. Тобто слово має бути в кінці рядка
// ----------------------------------------------------------------------------------------------------------
// \r - повернення каретки  (використовується в Windows) (використовується в парі з \n)

// ==========================================================================================================
// ^[A-Za-z\s\.]{0,}$ - буде шукати рядок, який має букви, пробіли і крапки

// [A-Z]{1,} - буде шукати одну або більше велику літеру
// [a-z]{1,} - буде шукати одну або більше маленьку літеру
// [\w\-]{8,16} - буде шукати від 8 до 16 символів, які можуть бути буквами, цифрами, або дефісом (створення логіна)
// (?:[\w\-\@]+){8,16} - буде шукати від 8 до 16 символів, які можуть бути буквами, цифрами, або символом (створення пароля)
// ^(?:[\w\-]){8,16}@(?:[\w\-]){1,16}.(?:[\w\-]){1,16}$ - букви та цифри (слово від 8 до 16 символів) потім "@" знову символи в кількості від 1 до 16, "." і знову слово від 1 до 16  (для емейлу)

// ==========================================================================================================
// Створення регулярного виразу через конструктор
// new RegExp(pattern, flags);
// pattern - шаблон регулярного виразу
// flags - прапори (g - глобальний пошук, i - ігнорування регістру, m - багаторядковий режим)
const pattern = 'hello',
  flags = 'gm'
let reg = new RegExp(pattern, flags)
reg = new RegExp('hello', 'gm')

// ----------------------------------------------------------------------------------------------------------
// Створення через рядок
let re = /\w+/g
// або
reg = /pattern/gm
// ==========================================================================================================
// Методи регулярних виразів
// .flags - показує прапори
console.log(reg.flags) // gm
// ----------------------------------------------------------------------------------------------------------
// .global - показує глобальний пошук
console.log(reg.global) // true (якщо є прапор g)
// ----------------------------------------------------------------------------------------------------------
// .multiline - показує багаторядковий режим
console.log(reg.multiline) // true (якщо є прапор m)
// ----------------------------------------------------------------------------------------------------------
// .dotAll - показує чи є прапор s (крапка)
console.log(reg.dotAll) // false (true - якщо є прапор s)
// ----------------------------------------------------------------------------------------------------------
// .ignoreCase - показує чи є прапор i (ігнорування регістру)
console.log(reg.ignoreCase) // false (true - якщо є прапор i)
// ----------------------------------------------------------------------------------------------------------
// .sticky - показує чи є прапор y (пошук з певної позиції)
console.log(reg.sticky) // false (true - якщо є прапор y)
// ----------------------------------------------------------------------------------------------------------
// .exec() - повертає масив зі співпадіннями
reg.exec('hello world') // ["hello", index: 0, input: "hello world", groups: undefined]
// Властивості масиву
// index - показує індекс першого співпадіння
// input - показує рядок, в якому шукається співпадіння
// groups - показує групи, які були знайдені
// indices - показує індекси першого і останнього співпадіння
// ----------------------------------------------------------------------------------------------------------
// .test() - перевіряє чи є співпадіння в рядку
reg.test('hello world') // true
reg.test('yes') // false
// ----------------------------------------------------------------------------------------------------------
// .source - показує шаблон (pattern)
console.log(reg.source) // pattern (назва змінної)
// ----------------------------------------------------------------------------------------------------------
// .lastIndex - показує індекс наступного співпадіння
reg.lastIndex // 0
// ----------------------------------------------------------------------------------------------------------
// .replace(pattern, replacement) - замінює перше співпадіння

// .replaceAll(pattern, replacement) - замінює всі співпадіння, але має бути включений прапор g
// pattern - шаблон який заміняємо
// replacement - на що буде заміна
reg.replace('hello', 'hi') // hi world
reg.replace(pattern, '###') // ### world
// ----------------------------------------------------------------------------------------------------------
// .search(regexp) - повертає індекс першого співпадіння
reg.search('world') // 6
// ----------------------------------------------------------------------------------------------------------
// .match(regexp) - повертає масив зі співпадіннями
// .matchAll(regexp) - повертає ітератор зі співпадіннями, але має бути включений прапор g
reg.match('world') // ["world", index: 6, input: "hello world", groups: undefined]
reg.matchAll('world') // [RegExpStringIterator] {}
// ----------------------------------------------------------------------------------------------------------
// Виконання регулярного виразу
