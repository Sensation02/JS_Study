// Асинхронно (Async) - це коли код виконується не в тому порядку, в якому він написаний.
// Зачекати (Await) - це коли ми чекаємо поки виконається певна умова, а потім виконуємо код далі.
// Ці ключові слова по суті є синтаксичним цукром для Promise. Разом вони дозволяють писати асинхронний код так, ніби він синхронний.

// Як писати асинхронний код?
function loadFile() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('File content')
    }, 1000)
  })
}
function sendFilesToData(fileData) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Data saved')
    }, 1000)
  })
}

function loadAndSendFile() {
  return loadFile()
    .then((fileData) => {
      return sendFilesToData(fileData)
    })
    .finally(() => {
      console.log('All done')
    })
}
loadAndSendFile()
// але це можна зробити простіше

const loadAndSendFile2 = async () => {
  const fileData = await loadFile()
  const data = await sendFilesToData(fileData)
  console.log(data)
}

// в такій функції можна використовувати then, catch, finally:
loadAndSendFile2().then(() => {
  console.log('All done')
})

// ==========================================================================================================
// HTTP-запити
// - це механізм взаємодії між клієнтом і сервером, за допомогою якого клієнт (браузер) може отримати деякі дані з сервера. Ці запити об'єднують фронтенд і бекенд. І дивлячись на на інформацію вище, більшість запитів будуть асинхронними.

// Для перевірки роботи працюємо в теці JSLearning\Promise2\index.js (index.html)

// ----------------------------------------------------------------------------------------------------------
// Відправка запиту
// fetch(resource, options) - це функція, яка відправляє запит на сервер і повертає об'єкт Promise. Вона приймає два параметри: resource - це адреса, на яку відправляється запит, options - це об'єкт з налаштуваннями запиту.

// Запит
// new Request(input, options) - це конструктор, який створює новий запит. Він приймає два параметри: input - це адреса, на яку відправляється запит, options - це об'єкт з налаштуваннями запиту. Цей конструктор можна використовувати для створення запиту, який потім можна відправити за допомогою fetch.

// #region Методи HTTP-запиту (ці методи тільки для читання, в об'єкт options)
// Написавши їх, видалити чи замінити потім ми не зможемо
// GET - це запит, який використовується для отримання даних з сервера. Це типовий запит, який використовується для отримання HTML-сторінок, зображень, стилів, скриптів і т.д.
// POST - це запит, який використовується для відправки даних на сервер. Це типовий запит, який використовується для відправки даних з форми на сервер.
// PUT - це запит, який використовується для оновлення даних на сервері. Це типовий запит, який використовується для оновлення даних на сервері.
// DELETE - це запит, який використовується для видалення даних на сервері. Це типовий запит, який використовується для видалення даних на сервері.
// HEAD - це запит, який використовується для отримання заголовків відповіді сервера. Це типовий запит, який використовується для отримання заголовків відповіді сервера.
// OPTIONS - це запит, який використовується для отримання доступних методів запиту для конкретного ресурсу. Це типовий запит, який використовується для отримання доступних методів запиту для конкретного ресурсу.

// body - це тіло запиту. Воно використовується для передачі даних на сервер. Це може бути об'єкт, який буде перетворений в JSON, або об'єкт FormData, або об'єкт Blob, або об'єкт ArrayBuffer, або об'єкт URLSearchParams, або об'єкт USVString. Відправка таких даних одразу відбувається з перетворенням в JSON. Якщо потрібно відправити інший тип даних, то потрібно використовувати інший тип об'єкта.

// json() - це метод, який повертає об'єкт Promise, який вирішується в JSON-об'єкт. Цей метод можна використовувати для отримання JSON-об'єкта з відповіді сервера.

// text() - це метод, який повертає об'єкт Promise, який вирішується в рядок. Цей метод можна використовувати для отримання рядка з відповіді сервера.

// clone() - це метод, який повертає новий об'єкт Request, який є копією поточного об'єкта Request.

// bodyUsed - це властивість, яка повертає логічне значення, яке показує, чи було використано тіло запиту.

// headers - це властивість, яка повертає об'єкт Headers, який містить заголовки запиту.
// #endregion

// #region Заголовки
// new Headers(init) - це конструктор, який створює новий об'єкт Headers. Він приймає один необов'язковий параметр init, який може бути об'єктом, який містить заголовки запиту, або масивом масивів, який містить заголовки запиту.
// Функції для роботи з заголовками:
// append(name, value) - це метод, який додає заголовок до об'єкта Headers. Він приймає два параметри: name - це назва заголовка, value - це значення заголовка.
// delete(name) - це метод, який видаляє заголовок з об'єкта Headers. Він приймає один параметр name, який є назвою заголовка.
// get(name) - це метод, який повертає значення заголовка з об'єкта Headers. Він приймає один параметр name, який є назвою заголовка.
// has(name) - це метод, який повертає логічне значення, яке показує, чи є заголовок в об'єкті Headers. Він приймає один параметр name, який є назвою заголовка.
// set(name, value) - це метод, який встановлює заголовок в об'єкт Headers. Він приймає два параметри: name - це назва заголовка, value - це значення заголовка.
// keys() - це метод, який повертає ітератор, який містить назви заголовків з об'єкта Headers.
// values() - це метод, який повертає ітератор, який містить значення заголовків з об'єкта Headers.
// entries() - це метод, який повертає ітератор, який містить масиви, які містять назви і значення заголовків з об'єкта Headers.
// forEach(callback, thisArg) - це метод, який викликає функцію callback для кожного заголовка з об'єкта Headers. Він приймає два параметри: callback - це функція, яка буде викликана для кожного заголовка, thisArg - це значення this, яке буде використовуватися в функції callback.
// #endregion

// #region Просунуті методи для роботи з заголовками:
// redirect - це вбудована властивість, яка повертає рядок, що представляє тип перенаправлення запиту. Це може бути follow, error або manual.
// - follow - це тип перенаправлення, який використовується для автоматичного перенаправлення запиту.
// - error - це тип перенаправлення, який використовується для відображення помилки при перенаправленні запиту.
// - manual - це тип перенаправлення, який використовується для відображення відповіді при перенаправленні запиту.

// referrer - це вбудована властивість, яка повертає рядок, що представляє адресу, з якої був зроблений запит.

// referrerPolicy - це вбудована властивість, яка повертає рядок, що представляє політику відображення адреси, з якої був зроблений запит. Це може бути no-referrer, no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin або unsafe-url.

// url - це вбудована властивість, яка повертає рядок, що представляє адресу, на яку був зроблений запит.

// destination - це вбудована властивість, яка повертає рядок, що представляє тип ресурсу, на який був зроблений запит. Це може бути audio, audioworklet, document, embed, font, image, manifest, object, paintworklet, report, script, sharedworker, style, track, video, worker або xslt.

// integrity - це вбудована властивість, яка повертає рядок, що представляє хеш-код ресурсу, на який був зроблений запит, для перевірки цілісності відповіді.

// cache - це вбудована властивість, яка повертає рядок, що представляє тип кешування запиту. Це може бути default, no-store, reload, no-cache, force-cache або only-if-cached.
// - default - стандартне кешування запиту.
// - no-store - запит не кешується.
// - reload - запит кешується, але перевіряється на сервері.
// - no-cache - запит не кешується.
// - force-cache - запит кешується, або записує нову відповідь та кешує її. (іноді корисно бо зменшує кількість запитів на сервер і зменшує час відповіді)

// mode - це вбудована властивість, яка визначає як браузер повинен обробляти запит і контролювати політику безпеки при відповіді запиту. Це може бути same-origin, no-cors, cors або navigate.
// #endregion

// #region Відповідь
// new Response(body, options) - це конструктор, який створює новий об'єкт Response. Він приймає два необов'язкові параметри: body - це тіло відповіді, options - це об'єкт з налаштуваннями відповіді.
// або Response.json(body, options) - це статичний метод, який повертає об'єкт Promise, який вирішується в JSON-об'єкт. Цей метод можна використовувати для отримання JSON-об'єкта з відповіді сервера.

// text() - відповідь у вигляді рядка
// json() - відповідь у вигляді об'єкта
// blob() - відповідь у вигляді об'єкта Blob
// arrayBuffer() - відповідь у вигляді об'єкта ArrayBuffer
// formData() - відповідь у вигляді об'єкта FormData
// clone() - це метод, який повертає новий об'єкт Response, який є копією поточного об'єкта Response.
// bodyUsed - це властивість, яка повертає логічне значення, яке показує, чи було використано тіло відповіді.
// status - це властивість, яка повертає число, яке представляє код статусу відповіді. (200, 404, 500 і т.д.)
// statusText - це властивість, яка повертає рядок, який представляє текстове повідомлення про статус відповіді. (OK, Not Found, Internal Server Error і т.д.)
// headers - це властивість, яка повертає об'єкт Headers, який містить заголовки відповіді.
// redirected - це властивість, яка повертає логічне значення, яке показує, чи був запит перенаправлений.
// ok - це властивість, яка повертає логічне значення, яке показує, чи був запит успішним. Це означає, що код статусу відповіді знаходиться в діапазоні від 200 до 299.
// type - це властивість, яка повертає рядок, який представляє тип відповіді. Це може бути basic, cors або error.

// #endregion
